plugins {
    id 'com.github.johnrengelman.shadow'
}

sourceSets {
    main {
        resources.srcDir file("src/generated/resources")
    }
}

loom {
    forge {
        mixinConfig "swm.mixins.json"
    }

    runs {
        data {
            data()
            programArgs "--all", "--mod", "swm"
            programArgs "--output", file("src/generated/resources").absolutePath
            programArgs "--existing", project(":common").file("src/main/resources").absolutePath
        }
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
